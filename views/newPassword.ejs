<div class="alert-container">
  <p class="alert-message" id="notification"></p>
</div>

<section class="password-reset-container">
  <header>
    <h2>Reset Your Password</h2>
  </header>

  <form
    action="/resetPassword"
    method="POST"
    id="form-new-password"
    class="password-reset-form"
  >
    <input type="hidden" name="token" id="token" value="<%= token %>" />

    <div class="form-group">
      <label for="password">Enter New Password</label>
      <input
        type="password"
        name="password"
        id="password"
        placeholder="Create your new password"
        class="input-field"
      />
    </div>

    <button type="submit" class="submit-button">Update Password</button>
  </form>
</section>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  const notification = document.getElementById("notification");
  const form = document.getElementById("form-new-password");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const token = document.getElementById("token").value;
    const newPassword = document.getElementById("password").value.trim();

    if (!newPassword) {
      alert("Password cannot be empty!");
      return;
    }

    const body = { token, password: newPassword };

    try {
      const response = await fetch("/resetPassword", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      const data = await response.json();

      if (data.status === 200) {
        socket.emit("notification", data.message);
        setTimeout(() => {
          window.location.href = `/sign-in`;
        }, 3000);
      } else {
        socket.emit("notification", data.message);
        setTimeout(() => {
          location.reload();
        }, 3000);
      }
    } catch (error) {
      console.error(error);
      alert("An error occurred. Please try again.");
    }
  });

  socket.on("notification", (message) => {
    alert(message);
  });
</script>
